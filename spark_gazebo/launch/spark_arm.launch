<?xml version="1.0"?>
<launch>
    <arg name="robot_description_file" default="$(dirname)/inc/load_ur3.launch.xml"
        doc="Launch file which populates the 'robot_description' parameter." />
    <arg name="joint_limit_params" default="$(find spark_description)/config/ur3/joint_limits.yaml" />
    <arg name="kinematics_params"
        default="$(find spark_description)/config/ur3/default_kinematics.yaml" />
    <arg name="physical_params"
        default="$(find spark_description)/config/ur3/physical_parameters.yaml" />
    <arg name="visual_params" default="$(find spark_description)/config/ur3/visual_parameters.yaml" />

    <!-- Controller configuration -->
    <arg name="controller_config_file" default="$(find spark_gazebo)/config/ur3_controllers.yaml"
        doc="Config file used for defining the ROS-Control controllers." />
    <arg name="controllers" default="joint_state_controller eff_joint_traj_controller"
        doc="Controllers that are activated by default." />
    <arg name="stopped_controllers" default="joint_group_eff_controller"
        doc="Controllers that are initally loaded, but not started." />

    <!-- Load urdf on the parameter server -->
    <include file="$(arg robot_description_file)">
        <arg name="joint_limit_params" value="$(arg joint_limit_params)" />
        <arg name="kinematics_params" value="$(arg kinematics_params)" />
        <arg name="physical_params" value="$(arg physical_params)" />
        <arg name="visual_params" value="$(arg visual_params)" />
    </include>

    <!-- Robot state publisher -->
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    </node>


    <!-- Gazebo parameters -->
    <arg name="gazebo_model_name" default="robot"
        doc="The name to give to the model in Gazebo (after spawning it)." />
    <arg name="gazebo_world" default="worlds/empty.world" doc="The '.world' file to load in Gazebo." />
    <arg name="gui" default="true"
        doc="If true, Gazebo UI is started. If false, only start Gazebo server." />
    <arg name="paused" default="false"
        doc="If true, start Gazebo in paused mode. If false, start simulation as soon as Gazebo has loaded." />
    <arg name="robot_description_param_name" default="robot_description"
        doc="Name of the parameter which contains the robot description (ie: URDF) which should be spawned into Gazebo." />
    <arg name="spawn_z" default="0.1"
        doc="At which height the model should be spawned. NOTE: lower values will cause the robot to collide with the ground plane." />
    <arg name="start_gazebo" default="true"
        doc="If true, Gazebo will be started. If false, Gazebo will be assumed to have been started elsewhere." />

    <!-- Load controller settings -->
    <rosparam file="$(arg controller_config_file)" command="load" />

    <!-- Start Gazebo and load the empty world if requested to do so -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch" if="$(arg start_gazebo)">
        <arg name="world_name" value="$(arg gazebo_world)" />
    </include>

    <!-- Spawn the model loaded earlier in the simulation just started -->
    <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model"
        args="
    -urdf
    -param $(arg robot_description_param_name)
    -model $(arg gazebo_model_name)
    -z $(arg spawn_z)"
        output="screen" respawn="false" />

    <!-- Load and start the controllers listed in the 'controllers' arg. -->
    <node name="ros_control_controller_spawner" pkg="controller_manager" type="spawner"
        args="$(arg controllers)" output="screen" respawn="false" />

    <!-- Load other controllers, but do not start them -->
    <node name="ros_control_stopped_spawner" pkg="controller_manager" type="spawner"
        args="--stopped $(arg stopped_controllers)" output="screen" respawn="false" />

</launch>